#include<bits/stdc++.h>//dijictra
using namespace std;
int x[4]={-1,0,0,1};
int y[4]={0,1,-1,0};
int n,m;
int a[100][100];
int b[100][100];
int solve(int x1,int y1,int x2,int y2){
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			b[i][j]=INT_MAX;
		}
	}
	priority_queue<tuple<int,int,int>,vector<tuple<int,int,int>>,greater<tuple<int,int,int>>> p;
	b[x1][y1]=a[x1][y1];
	p.push(make_tuple(b[x1][y1],x1,y1));
	while(!p.empty()){
		tuple<int,int,int> k=p.top();
		int cost=get<0>(k);
		int x3=get<1>(k);
		int y3=get<2>(k);
		p.pop();
		if(x3==x2 && y3==y2) return cost;
		for (int i = 0; i < 4; i++) {
	        int nx = x3 + x[i];
	        int ny = y3 + y[i];
	
	        if (nx >= 0 && ny >= 0 && nx < n && ny < m) {
	            int new_cost = cost + a[nx][ny];
	            if (new_cost < b[nx][ny]) {
	                b[nx][ny] = new_cost;
	                p.push(make_tuple(new_cost, nx, ny));
	            }
	        }
	    }
	}
}
int main(){
	int t;
	cin >> t;
	while(t--){
		cin >> n>> m;
		for(int i=0;i<n;i++){
			for(int j=0;j<m;j++){
				cin >> a[i][j];
			}
		}
		int x1,y1,x2,y2;
		cin >> x1 >> y1 >> x2 >> y2;
		cout << solve(x1-1,y1-1,x2-1,y2-1) << endl;
	}
	return 0;
}
