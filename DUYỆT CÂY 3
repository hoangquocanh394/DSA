#include<bits/stdc++.h>
using namespace std;
struct TreeNode{
	int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode(int x){
		val=x;
		left=NULL;
		right=NULL;
	}
};
TreeNode* maketree(int n,vector<vector<string>> relation){
	if(n==0) return NULL;
	unordered_map<int,TreeNode*> m;
	TreeNode* root=NULL;
	for(int i=0;i<n;i++){
		int parent=stoi(relation[i][0]);
		int child=stoi(relation[i][1]);
		char c=relation[i][2][0];
		if(m.find(parent)==m.end()){
			m[parent]=new TreeNode(parent);
		}
		TreeNode* parentnode=m[parent];
		if(m.find(child)==m.end()){
			m[child]=new TreeNode(child);
		}
		TreeNode* childnode=m[child];
		if(c=='L'){
			parentnode->left=childnode;
		}else if(c=='R'){
			parentnode->right=childnode;
		}
		if(!root){
			root=parentnode;
		}
	}
	return root;
}
vector<int> preorder(TreeNode* a){
	vector<int> v;
	if(a==nullptr){
		return v;
	}
	queue<TreeNode*> q;
	q.push(a);
	while(!q.empty()){
		TreeNode* t=q.front();
		q.pop();
		v.push_back(t->val);
		if(t->left!=NULL){
			q.push(t->left);
		}
		if(t->right!=NULL){
			q.push(t->right);
		}
	}
	return v;
}
int main(){
	int t;
	cin >> t;
	while(t--){
		int n;
		cin >> n;
		vector<vector<string>> relation(n,vector<string>(3));
		for(int i=0;i<n;i++){
			cin >> relation[i][0] >> relation[i][1] >> relation[i][2];
		}
		TreeNode* k=maketree(n,relation);
		vector<int> v=preorder(k);
		for(int i=0;i<v.size();i++){
			cout << v[i] << " ";
		}
		cout << endl;
	}
	return 0;
}
