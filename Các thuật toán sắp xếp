#include<bits/stdc++.h>
using namespace std;

void selectsort(int a[],int n){
	for(int i=0;i<n-1;i++){
		int tmp=i;
		for(int j=i+1;j<n;j++){
			if(a[tmp]>a[j]){
				tmp=j;
			}
		}
		swap(a[i],a[tmp]);
	}
	for(int i=0;i<n;i++){
		cout << a[i] << " ";
	}
}
void bubblesort(int a[],int n){
	for(int i=0;i<n-1;i++){
		for(int j=0;j<n-i-1;j++){
			if(a[j]>a[j+1]){
				swap(a[j],a[j+1]);
			}
		}
	}
	for(int i=0;i<n;i++){
		cout << a[i] << " ";
	}
}
void sxchen(int a[],int n){
	for(int i=1;i<n;i++){
		int x=a[i],pos=i-1;
		while(pos>=0 && a[pos]>x){
			a[pos+1]=a[pos];
			pos--;
		}
		a[pos+1]=x;
	}
	for(int i=0;i<n;i++){
		cout << a[i] << " ";
	}
}
void merge(int a[],int l,int m,int r){
	vector<int> v1(a+l,a+m+1);
	vector<int> v2(a+m+1,a+r+1);
	int i=0,j=0;
	while(i<v1.size() && j<v2.size()){
		if(v1[i]<=v2[j]){
			a[l]=v1[i];
			i++;
			l++;
		}else{
			a[l]=v2[j];
			j++;
			l++;
		}
	}
	while(i<v1.size()){
		a[l]=v1[i];
		i++;
		l++;
	}
	while(j<v2.size()){
		a[l]=v2[j];
		j++;
		l++;
	}
}
void mergesort(int a[],int l,int r){
	if(l>=r) return;
	int m=(l+r)/2;
	mergesort(a,l,m);
	mergesort(a,m+1,r);
	merge(a,l,m,r);
}
int patition(int a[],int l,int r){
	int pivot=a[r];
	int i=l-1;
	for(int j=l;j<r;j++){
		if(a[j]<=pivot){
			i++;
			swap(a[i],a[j]);
		}
	}
	i++;
	swap(a[i],a[r]);
	return i;
}
void quicksort(int a[],int l,int r){
	if(l>=r) return;
	int p=patition(a,l,r);
	quicksort(a,l,p-1);
	quicksort(a,p+1,r);
}
int main(){
	int n;
	cin >> n;
	int a[n];
	for(int i=0;i<n;i++){
		cin >> a[i];
	}
	quicksort(a,0,n-1);
	for(int i=0;i<n;i++){
		cout << a[i] << " ";
	}
}
